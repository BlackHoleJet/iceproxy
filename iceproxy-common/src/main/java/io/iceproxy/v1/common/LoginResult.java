// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package io.iceproxy.v1.common;

public class LoginResult implements java.lang.Cloneable, java.io.Serializable
{
    public int ret;

    public ServerInfo server;

    public LoginResult()
    {
        server = new ServerInfo();
    }

    public LoginResult(int ret, ServerInfo server)
    {
        this.ret = ret;
        this.server = server;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LoginResult _r = null;
        if(rhs instanceof LoginResult)
        {
            _r = (LoginResult)rhs;
        }

        if(_r != null)
        {
            if(ret != _r.ret)
            {
                return false;
            }
            if(server != _r.server)
            {
                if(server == null || _r.server == null || !server.equals(_r.server))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::common::LoginResult");
        __h = IceInternal.HashUtil.hashAdd(__h, ret);
        __h = IceInternal.HashUtil.hashAdd(__h, server);
        return __h;
    }

    public LoginResult
    clone()
    {
        LoginResult c = null;
        try
        {
            c = (LoginResult)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(ret);
        ServerInfo.__write(__os, server);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        ret = __is.readInt();
        server = ServerInfo.__read(__is, server);
    }

    static public void
    __write(IceInternal.BasicStream __os, LoginResult __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public LoginResult
    __read(IceInternal.BasicStream __is, LoginResult __v)
    {
        if(__v == null)
        {
             __v = new LoginResult();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final LoginResult __nullMarshalValue = new LoginResult();

    public static final long serialVersionUID = 569269706L;
}
