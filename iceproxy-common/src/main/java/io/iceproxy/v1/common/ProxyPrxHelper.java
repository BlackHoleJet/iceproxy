// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `common.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package io.iceproxy.v1.common;

/**
 * Provides type-specific helper functions.
 **/
public final class ProxyPrxHelper extends Ice.ObjectPrxHelperBase implements ProxyPrx
{
    private static final String __getSalt_name = "getSalt";

    public String getSalt(String userName)
    {
        return getSalt(userName, null, false);
    }

    public String getSalt(String userName, java.util.Map<String, String> __ctx)
    {
        return getSalt(userName, __ctx, true);
    }

    private String getSalt(String userName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getSalt_name);
        return end_getSalt(begin_getSalt(userName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getSalt(String userName)
    {
        return begin_getSalt(userName, null, false, false, null);
    }

    public Ice.AsyncResult begin_getSalt(String userName, java.util.Map<String, String> __ctx)
    {
        return begin_getSalt(userName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getSalt(String userName, Ice.Callback __cb)
    {
        return begin_getSalt(userName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSalt(String userName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSalt(userName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSalt(String userName, Callback_Proxy_getSalt __cb)
    {
        return begin_getSalt(userName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSalt(String userName, java.util.Map<String, String> __ctx, Callback_Proxy_getSalt __cb)
    {
        return begin_getSalt(userName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSalt(String userName, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSalt(userName, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSalt(String userName, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSalt(userName, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getSalt(String userName, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSalt(userName, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSalt(String userName, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSalt(userName, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getSalt(String userName, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSalt(userName, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         ProxyPrxHelper.__getSalt_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getSalt(String userName, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSalt_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getSalt_name, __cb);
        try
        {
            __result.prepare(__getSalt_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getSalt(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getSalt_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getSalt_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        io.iceproxy.v1.common.ProxyPrx __proxy = (io.iceproxy.v1.common.ProxyPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getSalt(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __httpGet_name = "httpGet";

    public int httpGet(String url)
    {
        return httpGet(url, null, false);
    }

    public int httpGet(String url, java.util.Map<String, String> __ctx)
    {
        return httpGet(url, __ctx, true);
    }

    private int httpGet(String url, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__httpGet_name);
        return end_httpGet(begin_httpGet(url, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_httpGet(String url)
    {
        return begin_httpGet(url, null, false, false, null);
    }

    public Ice.AsyncResult begin_httpGet(String url, java.util.Map<String, String> __ctx)
    {
        return begin_httpGet(url, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_httpGet(String url, Ice.Callback __cb)
    {
        return begin_httpGet(url, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_httpGet(String url, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_httpGet(url, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_httpGet(String url, Callback_Proxy_httpGet __cb)
    {
        return begin_httpGet(url, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_httpGet(String url, java.util.Map<String, String> __ctx, Callback_Proxy_httpGet __cb)
    {
        return begin_httpGet(url, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_httpGet(String url, 
                                         IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_httpGet(url, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_httpGet(String url, 
                                         IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_httpGet(url, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_httpGet(String url, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_httpGet(url, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_httpGet(String url, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_httpGet(url, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_httpGet(String url, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_IntCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_httpGet(url, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         ProxyPrxHelper.__httpGet_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_httpGet(String url, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__httpGet_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__httpGet_name, __cb);
        try
        {
            __result.prepare(__httpGet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(url);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_httpGet(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __httpGet_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __httpGet_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        io.iceproxy.v1.common.ProxyPrx __proxy = (io.iceproxy.v1.common.ProxyPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_httpGet(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __login_name = "login";

    public LoginResult login(LoginInfo loginInfo, ClientCallback client)
    {
        return login(loginInfo, client, null, false);
    }

    public LoginResult login(LoginInfo loginInfo, ClientCallback client, java.util.Map<String, String> __ctx)
    {
        return login(loginInfo, client, __ctx, true);
    }

    private LoginResult login(LoginInfo loginInfo, ClientCallback client, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__login_name);
        return end_login(begin_login(loginInfo, client, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, ClientCallback client)
    {
        return begin_login(loginInfo, client, null, false, false, null);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, ClientCallback client, java.util.Map<String, String> __ctx)
    {
        return begin_login(loginInfo, client, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, ClientCallback client, Ice.Callback __cb)
    {
        return begin_login(loginInfo, client, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, ClientCallback client, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(loginInfo, client, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, ClientCallback client, Callback_Proxy_login __cb)
    {
        return begin_login(loginInfo, client, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, ClientCallback client, java.util.Map<String, String> __ctx, Callback_Proxy_login __cb)
    {
        return begin_login(loginInfo, client, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, 
                                       ClientCallback client, 
                                       IceInternal.Functional_GenericCallback1<LoginResult> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(loginInfo, client, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, 
                                       ClientCallback client, 
                                       IceInternal.Functional_GenericCallback1<LoginResult> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(loginInfo, client, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, 
                                       ClientCallback client, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<LoginResult> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(loginInfo, client, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(LoginInfo loginInfo, 
                                       ClientCallback client, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<LoginResult> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(loginInfo, client, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_login(LoginInfo loginInfo, 
                                        ClientCallback client, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_GenericCallback1<LoginResult> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(loginInfo, client, __ctx, __explicitCtx, __synchronous, 
                           new IceInternal.Functional_TwowayCallbackArg1<io.iceproxy.v1.common.LoginResult>(__responseCb, __exceptionCb, __sentCb)
                               {
                                   public final void __completed(Ice.AsyncResult __result)
                                   {
                                       ProxyPrxHelper.__login_completed(this, __result);
                                   }
                               });
    }

    private Ice.AsyncResult begin_login(LoginInfo loginInfo, 
                                        ClientCallback client, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__login_name, __cb);
        try
        {
            __result.prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            LoginInfo.__write(__os, loginInfo);
            __os.writeObject(client);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public LoginResult end_login(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __login_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            LoginResult __ret = null;
            __ret = LoginResult.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __login_completed(Ice.TwowayCallbackArg1<LoginResult> __cb, Ice.AsyncResult __result)
    {
        io.iceproxy.v1.common.ProxyPrx __proxy = (io.iceproxy.v1.common.ProxyPrx)__result.getProxy();
        LoginResult __ret = null;
        try
        {
            __ret = __proxy.end_login(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxyPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ProxyPrx.class, ProxyPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxyPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ProxyPrx.class, ProxyPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxyPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ProxyPrx.class, ProxyPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxyPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ProxyPrx.class, ProxyPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ProxyPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ProxyPrx.class, ProxyPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ProxyPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ProxyPrx.class, ProxyPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::common::Proxy"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, ProxyPrx v)
    {
        __os.writeProxy(v);
    }

    public static ProxyPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ProxyPrxHelper result = new ProxyPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
